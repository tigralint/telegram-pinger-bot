import os
import threading
import logging
from flask import Flask
from telegram import Update
from telegram.error import BadRequest
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = os.environ.get("TELEGRAM_TOKEN")
PORT = int(os.environ.get('PORT', 5000))
USER_LIST_FILE = "group_user_ids.txt"
# ------------------

# –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Bot is alive and running!'

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º ---

def load_user_ids():
    if not os.path.exists(USER_LIST_FILE):
        return set()
    with open(USER_LIST_FILE, "r") as f:
        return set(int(line.strip()) for line in f if line.strip())

def save_user_ids(user_ids):
    with open(USER_LIST_FILE, "w") as f:
        for user_id in user_ids:
            f.write(str(user_id) + "\n")

def add_user_id(user_id):
    user_ids = load_user_ids()
    if user_id not in user_ids:
        user_ids.add(user_id)
        save_user_ids(user_ids)
        return True
    return False

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def remember_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø–∏—Å–∞–≤—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    if update.message and update.message.from_user:
        user = update.message.from_user
        if not user.is_bot and add_user_id(user.id):
            logging.info(f"–ó–∞–ø–æ–º–Ω–∏–ª –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.first_name} (ID: {user.id})")

async def tag_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø–æ–º–∏–Ω–∞–µ—Ç –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    if update.message and update.message.from_user:
        user = update.message.from_user
        if not user.is_bot:
            add_user_id(user.id)
            
    chat_id = update.message.chat_id
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ @all –≤ —á–∞—Ç–µ {chat_id}")
    
    user_ids = load_user_ids()
    if not user_ids:
        await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –∑–Ω–∞—é. –ü—É—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–∞–ø–∏—à—É—Ç —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ —á–∞—Ç!")
        return
    
    original_text = update.message.text.replace('/all', '').replace('@all', '').strip()
    mentions = [f"[\u200b](tg://user?id={uid})" for uid in user_ids]
    
    message_text_parts = []
    if original_text:
        message_text_parts.append(f"‚ùó **–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!** ‚ùó\n_{original_text}_\n\n")
    
    message_text_parts.append(" ".join(mentions))
    
    await context.bot.send_message(chat_id=chat_id, text="".join(message_text_parts), parse_mode='MarkdownV2')

async def show_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–æ–º–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    user_ids = load_user_ids()
    if not user_ids:
        await update.message.reply_text("–Ø –µ—â–µ –Ω–∏–∫–æ–≥–æ –Ω–µ –∑–∞–ø–æ–º–Ω–∏–ª.")
        return

    known_users = []
    for user_id in user_ids:
        try:
            user_chat = await context.bot.get_chat(user_id)
            known_users.append(user_chat.first_name)
        except Exception:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å ID {user_id}")

    if not known_users:
        await update.message.reply_text("–ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∏ –æ–± –æ–¥–Ω–æ–º –∏–∑ –∑–∞–ø–æ–º–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    response_text = f"‚úÖ **–Ø –∑–∞–ø–æ–º–Ω–∏–ª {len(known_users)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:**\n\n"
    for i, name in enumerate(known_users, 1):
        response_text += f"{i}. {name}\n"
    
    await update.message.reply_text(response_text)

# --- –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥."""
    help_text = (
        "ü§ñ **–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π.**\n\n"
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥:\n"
        "‚ñ™Ô∏è `@all` –∏–ª–∏ `/all` - —É–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö —è –∑–Ω–∞—é.\n"
        "‚ñ™Ô∏è `/list` - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö, –∫–æ–≥–æ —è –∑–∞–ø–æ–º–Ω–∏–ª.\n"
        "‚ñ™Ô∏è `/admins` - —É–ø–æ–º—è–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.\n"
        "‚ñ™Ô∏è `/cleanup` - —É–¥–∞–ª–∏—Ç—å –∏–∑ –º–æ–µ–π –ø–∞–º—è—Ç–∏ —Ç–µ—Ö, –∫—Ç–æ –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞.\n"
        "‚ñ™Ô∏è `/help` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–Ø –∑–∞–ø–æ–º–∏–Ω–∞—é –ª—é–¥–µ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–æ–≥–¥–∞ –æ–Ω–∏ –ø–∏—à—É—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç."
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def tag_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø–æ–º–∏–Ω–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞."""
    chat_id = update.message.chat_id
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /admins –≤ —á–∞—Ç–µ {chat_id}")
    
    try:
        admins = await context.bot.get_chat_administrators(chat_id)
        admin_mentions = [f"[\u200b](tg://user?id={admin.user.id})" for admin in admins if not admin.user.is_bot]
        
        if not admin_mentions:
            await update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∫—Ä–æ–º–µ –±–æ—Ç–æ–≤).")
            return
            
        message_text = "‚öúÔ∏è **–í–Ω–∏–º–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!** " + " ".join(admin_mentions)
        await context.bot.send_message(chat_id=chat_id, text=message_text, parse_mode='MarkdownV2')
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")

async def cleanup_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ–¥—à–∏—Ö –∏–∑ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    chat_id = update.message.chat_id
    user_ids = load_user_ids()
    
    if not user_ids:
        await update.message.reply_text("–ú–æ–π —Å–ø–∏—Å–æ–∫ –∏ —Ç–∞–∫ –ø—É—Å—Ç.")
        return
        
    await update.message.reply_text(f"–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É {len(user_ids)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
    
    kept_ids = set()
    removed_count = 0
    
    for user_id in user_ids:
        try:
            member = await context.bot.get_chat_member(chat_id, user_id)
            if member.status not in ['left', 'kicked']:
                kept_ids.add(user_id)
            else:
                removed_count += 1
        except BadRequest:
            removed_count += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            kept_ids.add(user_id)

    save_user_ids(kept_ids)
    await update.message.reply_text(f"‚úÖ **–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.**\n–û—Å—Ç–∞–ª–æ—Å—å –≤ —Å–ø–∏—Å–∫–µ: {len(kept_ids)}\n–£–¥–∞–ª–µ–Ω–æ: {removed_count}")

async def greet_new_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç–∞, –∫–æ–≥–¥–∞ –µ–≥–æ –¥–æ–±–∞–≤–∏–ª–∏ –≤ —á–∞—Ç."""
    my_bot = await context.bot.get_me()
    for member in update.message.new_chat_members:
        if member.id == my_bot.id:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –Ø –±–æ—Ç –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é."
            )

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê –ò –°–ï–†–í–ï–†–ê ---
def run_bot():
    application = Application.builder().token(TOKEN).build()

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
    # –†–∞–∑–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è /all –∏ @all, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    application.add_handler(CommandHandler("all", tag_all))
    application.add_handler(MessageHandler(filters.Regex(r'(?i)@all'), tag_all))
    # -------------------------

    application.add_handler(CommandHandler(["start", "help"], help_command))
    application.add_handler(CommandHandler("list", show_list))
    application.add_handler(CommandHandler("admins", tag_admins))
    application.add_handler(CommandHandler("cleanup", cleanup_list))
    
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, greet_new_members))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, remember_user))
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
    application.run_polling(stop_signals=None)

if __name__ == "__main__":
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.start()
    
    logging.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω...")
    app.run(host='0.0.0.0', port=PORT)